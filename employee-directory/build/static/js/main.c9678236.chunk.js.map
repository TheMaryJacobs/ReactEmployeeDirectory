{"version":3,"sources":["Components/Header.js","Components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Card","employee","firstName","lastName","role","pronouns","since","email","workPlace","App","useState","data","cards","setCards","onClick","sortedArray","sort","a","b","employeeA","employeeB","sortByName","sortByTenure","filteredArray","i","length","push","filterInOffice","filterRemote","map","e","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0iGAYeA,MATf,WACE,OACE,4BAAQC,UAAU,oBAChB,qCACA,oD,MC4CSC,MA/Cf,YAA6B,IAAbC,EAAY,EAAZA,SAEd,OACE,yBAAKF,UAAU,SACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,QACXE,EAASC,UADZ,IACwBD,EAASE,UAEjC,yBAAKJ,UAAU,QACf,yBAAKA,UAAU,WACb,2BAAOA,UAAU,YAAjB,WACA,wBAAIA,UAAU,WAAd,IAA0BE,EAASG,OAErC,6BACA,yBAAKL,UAAU,WACb,2BAAOA,UAAU,YAAjB,eACA,wBAAIA,UAAU,WAAd,IAA0BE,EAASI,WAEnC,6BACF,yBAAKN,UAAU,WACb,2BAAOA,UAAU,YAAjB,YACA,wBAAIA,UAAU,WAAd,IAA0BE,EAASK,QAEnC,6BACF,yBAAKP,UAAU,WACb,2BAAOA,UAAU,YAAjB,YACA,wBAAIA,UAAU,WAAd,IAA0BE,EAASM,QAEnC,6BACF,yBAAKR,UAAU,WACb,2BAAOA,UAAU,YAAjB,gBACA,wBAAIA,UAAU,WAAd,IAA0BE,EAASO,gB,OCmG9BC,MAhIf,WAAe,MAEaC,mBAASC,GAFtB,mBAENC,EAFM,KAECC,EAFD,KAyEb,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,6BAASA,UAAU,kBACjB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,gBAAb,YACA,4BACEe,QAAS,kBA3ErB,WACE,IAAIC,EAAcH,EAClBG,EAAYC,MAAK,SAASC,EAAGC,GAC3B,IAAIC,EAAYF,EAAEd,SACdiB,EAAYF,EAAEf,SAClB,OAAIgB,EAAYC,GACN,EAEND,EAAYC,EACP,EAEF,KAETP,EAAS,YAAIE,IA8DYM,IACftB,UAAU,UAFZ,QAKA,4BACEe,QAAS,kBA/DvB,WACI,IAAIC,EAAcH,EAClBG,EAAYC,MAAK,SAASC,EAAGC,GAC3B,IAAIC,EAAYF,EAAEX,MACdc,EAAYF,EAAEZ,MAClB,OAAIa,EAAYC,GACN,EAEND,EAAYC,EACP,EAEF,KAETP,EAAS,YAAIE,IAkDYO,IACfvB,UAAU,UAFZ,mBAMF,yBAAKA,UAAU,oBACf,4BACAe,QAAS,WAvBfD,EAASF,IAwBHZ,UAAU,UAFV,aAMA,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,gBAAb,cACA,4BACAe,QAAS,kBA5DpB,WAEE,IADA,IAAMS,EAAgB,GACbC,EAAI,EAAGA,EAAIb,EAAKc,OAAQD,IAAI,CACtC,IAAMvB,EAAWU,EAAKa,GACK,cAAvBvB,EAASO,WACXe,EAAcG,KAAKzB,GAGrBY,EAASU,GAoDgBI,IACf5B,UAAU,WAFV,aAKA,4BACEe,QAAS,kBArDvB,WAEE,IADA,IAAMS,EAAgB,GACbC,EAAI,EAAGA,EAAIb,EAAKc,OAAQD,IAAI,CACtC,IAAMvB,EAAWU,EAAKa,GACK,WAAvBvB,EAASO,WACXe,EAAcG,KAAKzB,GAGrBY,EAASU,GA6CmBK,IACf7B,UAAU,UAFZ,YASJ,yBAAKA,UAAU,YACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACZa,EAAMiB,KAAI,SAASC,GAClB,OAAO,kBAAC,EAAD,CAAM7B,SAAU6B,aChHnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c9678236.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header container\">\n      <h2>React</h2>\n      <h1>Employee Directory</h1>\n    </header>\n  );\n}\n\nexport default Header;","// import React from \"./node_modules/react\";\nimport React from \"react\";\nimport \"./Card.css\";\n\nfunction Card({ employee }) {\n\n  return (\n    <div className=\"col-4\">\n      <div className=\"Card\">\n        <h1 className=\"Name\">\n          {employee.firstName} {employee.lastName}\n        </h1>\n        <div className=\"data\">\n        <div className=\"dataRow\">\n          <small className=\"dataType\">Role | </small>\n          <h3 className=\"dataCol\"> {employee.role}</h3>\n        </div>\n        <br/>\n        <div className=\"dataRow\">\n          <small className=\"dataType\">Pronouns | </small>\n          <h3 className=\"dataCol\"> {employee.pronouns}</h3>\n          </div>\n          <br/>\n        <div className=\"dataRow\">\n          <small className=\"dataType\">Since | </small>\n          <h3 className=\"dataCol\"> {employee.since}</h3>\n          </div>\n          <br/>\n        <div className=\"dataRow\">\n          <small className=\"dataType\">Email | </small>\n          <h4 className=\"dataCol\"> {employee.email}</h4>\n          </div>\n          <br/>\n        <div className=\"dataRow\">\n          <small className=\"dataType\">Work Place |</small>\n          <h3 className=\"dataCol\"> {employee.workPlace}</h3>\n          </div>\n\n\n        {/* <h3><small>Role | </small>{employee.role}</h3>\n        <h3><small>Pronouns | </small>{employee.pronouns}</h3>\n        <h3><small>Since | </small>{employee.since}</h3>\n        <h3><small>Email | </small>{employee.email}</h3>\n        <h3><small>ID | </small>{employee.employeeID}</h3>\n        <h4><small>Work Place |</small>{employee.workPlace}</h4> */}\n        </div>\n        </div>\n    </div>\n  );\n}\n\nexport default Card;","import React, { useState, } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport Card from \"./Components/Card\";\nimport data from \"./data/employeedata.json\";\n\nfunction App() {\n  //use cards as the state and pass it the data from our file\n  const [cards, setCards] = useState(data);\n\n  //Sort the table by at least one category\n  //sortByName\n  function sortByName() {\n    let sortedArray = cards;\n    sortedArray.sort(function(a, b) {\n      var employeeA = a.lastName;\n      var employeeB = b.lastName;\n      if (employeeA < employeeB) {\n        return -1;\n      }\n      if (employeeA > employeeB) {\n        return 1;\n      }\n      return 0;\n    });\n    setCards([...sortedArray]);\n  }\n\n//sort by tenure\nfunction sortByTenure() {\n    let sortedArray = cards;\n    sortedArray.sort(function(a, b) {\n      var employeeA = a.since;\n      var employeeB = b.since;\n      if (employeeA < employeeB) {\n        return -1;\n      }\n      if (employeeA > employeeB) {\n        return 1;\n      }\n      return 0;\n    });\n    setCards([...sortedArray]);\n  }\n\n// Filter the users by at least one property.\n// filter In Office\n function filterInOffice (){\n   const filteredArray = [];\n   for (let i = 0; i < data.length; i++){\n  const employee = data[i];\n  if (employee.workPlace === \"In Office\"){\n    filteredArray.push(employee);\n    }\n  }\n  setCards(filteredArray);\n }\n\n// filter remote\nfunction filterRemote (){\n  const filteredArray = [];\n  for (let i = 0; i < data.length; i++){\n const employee = data[i];\n if (employee.workPlace === \"Remote\"){\n   filteredArray.push(employee);\n   }\n }\n setCards(filteredArray);\n}\n\n\n\n\n\n//clears filters and displays all employees\n  function filterNone() {\n    setCards(data);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <section className=\"container main\">\n        <div className=\"row\">\n          <div className=\"col-4 button-col\">\n            <p className=\"button-label\">Sort by:</p>\n            <button\n              onClick={() => sortByName()}\n              className=\"button\">\n              Name\n            </button>\n            <button\n              onClick={() => sortByTenure()}\n              className=\"button\">\n              Time Employeed\n            </button>\n          </div>\n          <div className=\"col-4 button-col\">\n          <button \n          onClick={() => filterNone()} \n          className=\"button\">\n              View All\n            </button>\n          </div>\n          <div className=\"col-4 button-col\">\n            <p className=\"button-label\">Filter by:</p>\n            <button \n            onClick={() => filterInOffice()} \n            className=\"button \">\n              In Office\n            </button>\n            <button\n              onClick={() => filterRemote()}\n              className=\"button\"\n            >\n              Remote\n            </button>\n            \n          </div>\n        </div>\n        <div className=\"row grid\">\n          <div className=\"col-12\">\n            <div className=\"row employee-cards\">\n              {cards.map(function(e) {\n                return <Card employee={e} />;\n              })}\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}